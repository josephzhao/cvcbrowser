<h4>Map Measurement List</h4>
{% if mapmeasurements is null or mapmeasurements | length == 0 %}
    No any measruement history info
{% else %}
    <table class="measurement_list" style="width:100%">
        <tbody>
            <tr>
                <th>Name</th>
                <th>Updated At</th>

                <th class="clearmeasurement_on_map pull-right"><i><img src="/images/map-clear.svg" style="width:24px;height:24px;"></img></i></th>
            </tr>
            {% for mapmeasurement in mapmeasurements %}
                <tr>
                    <td>{{mapmeasurement.name}}</td>
                    <td>{{mapmeasurement.updatedAt|date}}</td>
                    <td class="showmeasurement_on_map pull-right"><i class="delete fa fa-times" data-id="{{mapmeasurement.id}}"></i><i class="show-on-map" data-id="{{mapmeasurement.id}}"><img src="/images/map-icon.png" style="width:24px;height:24px;"></img></i></td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
    <script>
        $(document).ready(function () {
            $("div#sidebar-left div#sidebar_content table.measurement_list td.showmeasurement_on_map i").css("cursor", 'pointer');
            $("div#sidebar-left div#sidebar_content table.measurement_list th.clearmeasurement_on_map i").css("cursor", 'pointer');
            $("div#sidebar-left div#sidebar_content table.measurement_list td.showmeasurement_on_map i.delete").unbind("click");
            $("div#sidebar-left div#sidebar_content table.measurement_list td.showmeasurement_on_map i.delete").click(function () {
                var res = confirm("Are you sure you want to delete this measurement!");
                if (res) {
                    deletemeasurement($(this).data("id"));
                }
            });
            $("div#sidebar-left div#sidebar_content table.measurement_list td.showmeasurement_on_map i.show-on-map").unbind("click");
            $("div#sidebar-left div#sidebar_content table.measurement_list td.showmeasurement_on_map i.show-on-map").click(function () {
                showmeasurement_on_map($(this).data("id"));
            });
            $("div#sidebar-left div#sidebar_content table.measurement_list th.clearmeasurement_on_map i").click(function () {
                if (window.map === undefined || window.map === null || window.map.drawnItems === null || window.map.drawnItems === undefined) {
                    return;
                }

                var layers = window.map.drawnItems.getLayers();
                for (var i = 0; i < layers.length; i++) {

                    if (layers[i].type === "measure_layer") {

                        window.map.drawnItems.removeLayer(layers[i]);
                    }
                }
            });
            function showmeasurement_on_map(id) {
                $.ajax({
                    url: Routing.generate('measure_showmeasurement_on_map', {'_locale': window.locale}),
                    method: 'GET',
                    data: {
                        id: id
                    },
                    success: function (response) {
                        if (response.success === false) {
                            alert(response.message);
                            return;
                        }


                        if (typeof response.data === 'string') {
                            response.data = JSON.parse(response.data);
                        }
                        if (typeof response.data.geom === 'string') {
                            response.data.geom = JSON.parse(response.data.geom);
                        }

                        if (window.map !== undefined && window.map !== null) {
                            if (window.map.drawnItems !== null && window.map.drawnItems !== undefined) {
                                var layers = window.map.drawnItems.getLayers();
                                for (var i = 0; i < layers.length; i++) {
                                    if (layers[i].type === "measure_layer") {
                                        window.map.drawnItems.removeLayer(layers[i]);
                                    }
                                }
                            }
                        }
                        if (!window.map.drawnItems) {
                            var drawnItems = new L.FeatureGroup();
                            $(drawnItems).attr({"id": 'user_draw_features'});
                            window.map.addLayer(drawnItems);
                            window.map.drawnItems = drawnItems;
                        }
                        var feature = null;
                        
                        
                        var coordinates;

                        if (typeof response.data.geom === 'object')
                            coordinates = response.data.geom.coordinates;
                        else
                            coordinates = JSON.parse(response.data.geom).coordinates;

                        if ($.isArray(coordinates[0])) {
                            for (var j = 0; j < coordinates[0].length; j++) {
                                var temp = coordinates[0][j][0];
                                coordinates[0][j][0] = coordinates[0][j][1];
                                coordinates[0][j][1] = temp;
                            }
                        }
                        else
                        {
                            var temp = coordinates[0];
                            coordinates[0] = coordinates[1];
                            coordinates[1] = temp;
                        }

                        if (response.layerType === 'polygon')
                        {
                            feature = new L.Polygon(coordinates);
                        }

                        if (response.layerType === 'polyline'||response.layerType ==='LineString'||response.layerType ==='Polyline')
                        {
                            feature = new L.Polyline(coordinates);
                        }
                        if (response.layerType === 'rectangle')
                        {
                            feature = new L.rectangle([coordinates[0][0], coordinates[0][2]]);
                        }
                            if (response.layerType === 'circle')
                        {
                            feature = new L.circle(coordinates, response.radius);
                        }

                        feature.bindLabel(response.name);
                     
                        if (feature) {
                            feature.id = response.data.id;
                            feature.type = response.type;
                            feature.layerType = response.layerType;
                            feature.on("click", function () {

                            });
                            window.map.drawnItems.addLayer(feature);
                        }
                    }
                });
            }

            function deletemeasurement(id) {
                $.ajax({
                    url: Routing.generate('measure_deletemeasurement', {'_locale': window.locale}),
                    method: 'POST',
                    data: {
                        id: id
                    },
                    success: function (response) {
                        if (response.success === true) {
                            //       alert($("div#sidebar-left div#sidebar_content table.measurement_list td.showmeasurement_on_map i.delete[data-id='" + response.id + "']").parents("tr").length);
                            $("div#sidebar-left div#sidebar_content table.measurement_list td.showmeasurement_on_map i.delete[data-id='" + response.id + "']").parents("tr").remove();
                            if (window.map !== undefined && window.map !== null) {
                                if (window.map.drawnItems !== null && window.map.drawnItems !== undefined) {
                                    var layers = window.map.drawnItems.getLayers();
                                    for (var i = 0; i < layers.length; i++) {
                                        if (layers[i].type === "measure_layer" && layers[i].id === response.id) {
                                            window.map.drawnItems.removeLayer(layers[i]);
                                        }
                                    }
                                }
                            }
                        }
                        alert(response.message);

                    }
                });
            }

        });
    </script>
{% endif %}