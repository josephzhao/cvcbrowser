    
<tr>
    <td width="310px;">
        <div id="map2uweb_maptoc" style="width:310px;height:550px;background-color: #ffffff ">
            <div class="alert-message">
        {% for flashMessage in app.session.flashbag.get('notice') %}

            {{ flashMessage }}

        {% endfor %}
            </div>
            <div class="tabable">
                <ul class="nav nav-tabs">
                    <li class="active"><a href="#pane1" data-toggle="tab">Upload Shape File</a></li>
                    <li ><a href="#pane2" data-toggle="tab">Trade Areas</a></li>
                </ul>
                <div class="tab-content" >
                    <div id="pane1" class="tab-pane active" style="margin-left: 20px;text-align:left">

                      {% block shapefile %}
                        <div>

                            {% if app.user %}
                            <div id="shapefile" >
                                <form action="{{path('default_uploadshapefile')}}" method="post" {{ form_enctype(form) }}>

                                    <table class="records_list" style="text-align:left;width:100%;">
                                        <tbody>
                                            <tr>
                                                <td width="160px">{{ form_label(form.boundary_name) }}</td>
                                            </tr>
                                            <tr>
                                                <td>{{ form_widget(form.boundary_name)}}</td>
                                            </tr>

                                            <tr>
                                                <td>{{ form_label(form.shape_file) }}</td>
                                            </tr>
                                            <tr>
                                                <td>{{ form_widget(form.shape_file,{ 'attr': { 'multiple': 'multiple' }, 'full_name':  'form[shape_file][]' }) }}</td>
                                            </tr>

                                            <tr>
                                                <td>{{ form_label(form.upload_file_list) }}</td>
                                            </tr>
                                            <tr>
                                                <td>{{ form_widget(form.upload_file_list) }}</td>
                                            </tr>
                                            <tr>
                                                <td>{{ form_label(form.projection) }}</td>
                                            </tr>
                                            <tr>
                                                <td>{{ form_widget(form.projection) }}</td>
                                            </tr>
                                {#        <tr>
                                            <td>{{ form_label(form.epsg_name) }}</td>
                                        </tr>#}
                                            <tr>
                                                <td>{{ form_widget(form.epsg_name) }}</td>
                                            </tr>
                                            <tr>
                                                <td>{{ form_label(form.boundary_name_field) }}</td>
                                            </tr>
                                            <tr>
                                                <td>{{ form_widget(form.boundary_name_field) }}</td>
                                            </tr>
                                            <tr>
                                                <td><hr/></td>
                                            </tr>
                                            <tr>
                                                <td><input type="submit" value="Upload" disabled=true id="form_submit_button_id" /></td>
                                            </tr>
                                        </tbody>
                                    </table> 

                                {{ form_rest(form) }}


                                </form>
                            </div>
          {% else %}  
                            <div style="padding:10px">
                                Only logged in user can upload shape files!
                            </div>
        {% endif %}  {# end for user shape file upload #}
                        </div> {# end div shapefile #}
                        {% endblock %}

                    </div>
                    <div id="pane2"  class="tab-pane" style="margin-left: 20px;">


                {% if app.user %}
                        <div >


{#                            Total Boundaries :  {{ userboundaries | length }} <br>#}
                            Step 1: Select Boundary:<br>
                            <select id='userboundary_list' onChange='userboundary_change(this.value)'>

                         {% for boundary in userboundaries %}
                                <option  value="{{boundary.id}}">
                             {{ boundary.boundaryName }}
                                </option>
                         {% endfor %}


                            </select><br>
                            Step 2: Select Geometries:<br>
                            <select multiple size="4" id="geometries_select" onDblClick='zoomToSelectSearchFeature(this)'>

                            </select>
                            <br>
                            <input type="button" value="Add Geometry" onclick="onAddGeometry()">
                            <br>
                            Selected Geometries:<br>
                            <select size="4" id="geometries_selected" onDblClick='zoomToSelectSearchFeature(this)'>

                            </select>
                            <br>
                            <input type="button" value="Remove Geometry" onclick="onRemoveGeometry()"><br>
                            <input type="radio" id="as_individual_tradearea_id" checked=true name="trade_area_type" value="2"><font size="-1"> Selected Geometries as Individual Trade Area</font><br>
                            <input type="radio" id="merge_as_one_tradearea_id" checked=false name="trade_area_type" value="1"><font size="-1">Merge Selected Geometries as One Trade Area</font><br>
                            Trade Area Name:<input type="text" id="merge_as_one_tradearea_name_id"  name="trade_area_name" width="100px"><br>

                            <input type="button" value="Create Trade Area" onclick="onCreateTradeArea()"><br>
                            <input type="button" value="Map Display" onclick="updateUserBoundaryMap()">



                        </div>
                    {% else %}  
                        <div style="padding:10px">
                            Only logged in user can show user's trade areas!
                        </div>
                    {% endif %}  {# end for user shape file upload #}
                    </div>
                </div><!-- /.tab-content -->
            </div><!-- /.tabbable -->
        </div>


    </td>
    <td width="670px;">
        <div id="map2uweb_map" style="width:670px;height:550px;">
        </div>
    </td>
</tr>



{% block javascripts %}
<script type="text/javascript">

    window.onload = function() {

        select_readdbf_file();

        if (document.getElementById('userboundary_list'))
            userboundary_change(document.getElementById('userboundary_list').value);
        map2u_webbundle.AddManiFoldSearchLayers = function() {

            var selected_layer = new OpenLayers.Layer.Vector("Selection", {name: 'Selection', styleMap: this.sm, visibility: true, isBaseLayer: false, displayInLayerSwitcher: false, renderers: ['Canvas', 'SVG', 'VML']});


            var healthsearch_layer = new OpenLayers.Layer.WMS(
                    "manifold:search", "http://map.neighbourhood123.com:8080/geoserver/manifold/wms",
                    {
                        LAYERS: 'manifold:manifold_geoms',
                        STYLES: '',
                        name: "search",
                        format: this.format,
                        projection: new OpenLayers.Projection("EPSG:4326"),
                        transparent: true,
                        tiled: true
                    },
            {
                buffer: 0,
                displayOutsideMaxExtent: true,
                isBaseLayer: false,
                //            visibility: false,
                yx: {'EPSG:4326': true}
            }
            );

            var filterParams = {
                filter: null,
                cql_filter: null,
                featureId: null
            };
            filterParams["cql_filter"] = 'ogc_fid = 0 and userboundary_id=0';

            healthsearch_layer.mergeNewParams(filterParams);
            this.search_layer = healthsearch_layer;
            this.selected_layer = selected_layer;

            this.map.addLayers([healthsearch_layer, selected_layer]);

        };
        map2u_webbundle.addSelectCrtl = function(selectLayer, selected_layer) {
            var selectCtrl = new OpenLayers.Control.GetFeature({
//internalProjection: this.map.getProjectionObject(),
//        externalProjection: new OpenLayers.Projection("EPSG:4326"),
                protocol: OpenLayers.Protocol.WFS.fromWMSLayer(selectLayer,
                        {featureNS: "http://map.neighbourhood123.com:8080/manifold"}),
                //    hover: true,
                format: this.format,
                multipleKey: "shiftKey",
                toggleKey: "ctrlKey"
            });

            selectCtrl.events.register("featureselected", this, function(e) {

                selected_layer.removeAllFeatures();
                if (e && e.feature)
                    selected_layer.addFeatures([e.feature]);
            });
            selectCtrl.events.register("featureunselected", this, function(e) {
                if (e && e.feature)
                    selected_layer.removeFeatures([e.feature]);
            });
            selectCtrl.events.register("outfeature", this, function(e) {
                if (e && e.feature)
                    selected_layer.removeFeatures([e.feature]);
            });
 {#       selectCtrl.events.register("hoverfeature", this, function(e) {
e.feature.geometry.transform(this.externalProjection, this.internalProjection);
//            selected_layer.removeAllFeatures();
        selected_layer.addFeatures([e.feature]);
        selected_layer.setVisibility(true);
});#}
            this.map.addControl(selectCtrl);
            selectCtrl.activate();
            this.selectCtrl = selectCtrl;

        };

        map2u_webbundle.AddManiFoldSearchLayers();
        map2u_webbundle.addSelectCrtl(map2u_webbundle.search_layer, map2u_webbundle.selected_layer);


    };
    var filter;
    var ctrlPressed = false;
    function cacheIt(event) {
        ctrlPressed = event.altKey; // check if aalt key pressed or not
    }
    document.onkeydown = cacheIt;
    document.onkeyup = cacheIt;



    function onCreateTradeArea() {
        if ($("#geometries_selected > option").length > 0)
        {
            var tradearea_name = $('#merge_as_one_tradearea_name_id').val();
            var tradearea_type = $('input:radio[name=trade_area_type]:checked').val();
            if(tradearea_type==1 && tradearea_name == '')
            {
                alert("Trade Area Name can not be empty!");
                return;
            }
            var options = $('#geometries_selected option');
            var userboundary_id = document.getElementById("userboundary_list").value;
            var values = $.map(options, function(option) {
                return option.value;
            });
            alert(tradearea_name);
            alert(tradearea_type);
            $.post("create_tradearea", {id: values, userboundary_id: userboundary_id, tradearea_name: tradearea_name, tradearea_type: tradearea_type}, function(response) {
                alert(response.data);
            });
        }
        else
        {
            alert("You should select geometries from geometries list.");
        }
    }
    function onAddGeometry() {


        $("#geometries_select option:selected").each(function() {
            // alert(this.value + "   " + this.text);
            var bExist = false;
            item_value = this.value;
            item_text = this.text;
            $("#geometries_selected > option").each(function() {

                if (this.value == item_value) {
                    bExist = true;
                }
            });
            if (bExist == false)
            {
                var selectBoxOption = document.createElement("option");//create new option 
                selectBoxOption.value = item_value;//set option value 
                selectBoxOption.text = item_text;//set option display text 
                document.getElementById('geometries_selected').add(selectBoxOption, null);

            }
        });


    }
    function onRemoveGeometry() {
        $("#geometries_selected option:selected").each(function() {
            $("#geometries_selected option[value='" + this.value + "']").remove();
        });
    }

    function userboundary_change(itemvalue) {


        $.post("boundary_list", {id: itemvalue}, function(response) {
            // log the response to the console
            $('#geometries_select').empty();
            $('#geometries_selected').empty();

            var filterParams = {
                filter: null,
                cql_filter: null,
                featureId: null
            };
            filterParams["cql_filter"] = 'ogc_fid = 0 and userboundary_id=0';

            map2u_webbundle.search_layer.mergeNewParams(filterParams);
            map2u_webbundle.selected_layer.removeAllFeatures();

            if (response.data !== null)
            {
                for (var i = 0; i < response.data.length; i++) {
                    var selectBoxOption = document.createElement("option");//create new option 
                    selectBoxOption.value = response.data[i].ogc_fid;//set option value 
                    selectBoxOption.text = response.data[i].name;//set option display text 
                    document.getElementById('geometries_select').add(selectBoxOption, null);//add created option to select box.
                }
            }

        });

    }
    // userboundaries_id
    function boundary_name_field_changed(itemvalue)
    {
        document.getElementById("form_boundary_name_field2").value = itemvalue;

    }
    function zoomToSelectSearchFeature(item) {



        //      if (ctrlPressed || document.getElementById('zoomtofeature_id').checked == true)
        //      {

        var userboundary_id = document.getElementById("userboundary_list").value;
        $.ajax({
            type: "GET",
            data: 'userboundary_id=' + userboundary_id + '&ogc_fid=' + item.value,
            url: "{{ path('default_featurecenter') }}",
            cache: false,
            success: function(transport) {
                if (transport.success === true)
                {
                    var fea = new OpenLayers.Format.WKT().read(transport.data[0].the_geom);
                    fea.geometry.transform(new OpenLayers.Projection("EPSG:" + transport.data[0].srid), new OpenLayers.Projection("EPSG:900913"));
                    var geom_bounds = transport.data[0].bounds;
                    geom_bounds = geom_bounds.replace(new RegExp("[()]", 'g'), "");

                    var bounds = new OpenLayers.Bounds(geom_bounds.split(",")).transform(new OpenLayers.Projection("EPSG:" + transport.data[0].srid), new OpenLayers.Projection("EPSG:900913"));
                    var level = map2u_webbundle.map.getZoomForExtent(bounds, true) + 1;
                    //  alert(level + "   " + bounds);
                    map2u_webbundle.map.setCenter(new OpenLayers.LonLat(fea.geometry.x, fea.geometry.y), level);//fea.geometry.getBounds());
                }

            }
        });
        //       }
        /*       else
         {
         
         if (item.id == "geometries_select")
         {
         var bExist = false;
         document.getElementById('geometries_selected')
         $("#geometries_selected > option").each(function() {
         
         if (this.value == item.value) {
         bExist = true;
         }
         });
         if (bExist == false)
         {
         var selectBoxOption = document.createElement("option");//create new option 
         selectBoxOption.value = item.value;//set option value 
         selectBoxOption.text = item.options[item.selectedIndex].text;//set option display text 
         document.getElementById('geometries_selected').add(selectBoxOption, null);
         
         }
         }
         else
         {
         
         $("#geometries_selected option[value='" + item.value + "']").remove();
         }
         
         }*/

    }
    function SelectAllPolygon(boundaryid) {
        $("input[type=checkbox]").each(function() {

            // alert(boundaryid + "   " + this.value);
            if (this.value === boundaryid)
                this.checked = true;
        });
    }
    function UnselectAllPolygon(boundaryid) {
        $("input[type=checkbox]").each(function() {
            // alert(boundaryid + "   " + this.value);
            if (this.value === boundaryid)
                this.checked = false;
        });
    }
    function updateUserBoundaryMap() {
        var varGeometryCombobox = document.getElementById("geometries_selected");
        var userboundary_id = document.getElementById("userboundary_list").value;
        var result = [];
        var options = varGeometryCombobox && varGeometryCombobox.options;
        var opt;
        for (var i = 0, iLen = options.length; i < iLen; i++) {
            opt = options[i];
            //if (opt.selected) {
            result.push(opt.value || opt.text);
            // }
        }
        if (map2u_webbundle !== undefined && map2u_webbundle.map !== undefined && map2u_webbundle.map !== null)
        {

            var filterParams = {
                filter: null,
                cql_filter: null,
                featureId: null
            };
            if (result.length === 1)
                filterParams["cql_filter"] = 'ogc_fid =' + result + " and userboundary_id=" + userboundary_id;
            else
                filterParams["cql_filter"] = 'ogc_fid in (' + result + ') and userboundary_id=' + userboundary_id;
            if (map2u_webbundle.search_layer)
            {
                map2u_webbundle.search_layer.mergeNewParams(filterParams);

                map2u_webbundle.selected_layer.removeAllFeatures();
                map2u_webbundle.selectCtrl.protocol.filterElements = result;
                map2u_webbundle.selectCtrl.protocol.userboundary_id = userboundary_id;

            }
        }

    }
    function showUserProfile(varCheckbox, boundaryid, ogc_fid, projection)
    {
        if (varCheckbox.checked === false)
        {

            if (window.confirm("Do you really want to remove this feature?"))
            {
                var layer = map2u_webbundle.map.getLayersByName('Editor');
                //  alert(layer);
                if (layer && layer[0])
                {
                    var fea = layer[0].getFeaturesByAttribute({'userboundary_id': boundaryid, 'ogc_fid': ogc_fid})[0];
                    if (fea)
                        layer[0].removeFeatures([fea]);
                }

            }
            else
                varCheckbox.checked = true;
        }
        //       else
        //       {

        var array = [];
        $("input[type=checkbox]:checked").each(function() {

            // alert(boundaryid + "   " + this.value);
            if (this.value === boundaryid)
                array.push(this.id);
        });
        if (map2u_webbundle !== undefined && map2u_webbundle.map !== undefined && map2u_webbundle.map !== null)
        {

            var filterParams = {
                filter: null,
                cql_filter: null,
                featureId: null
            };
            if (array.length === 1)
                filterParams["cql_filter"] = 'ogc_fid =' + array;
            else
                filterParams["cql_filter"] = 'ogc_fid in (' + array + ')';
            // merge the new filter definitions
            var layer = map2u_webbundle.map.getLayersByName('search');
            //      for( layer in map2u_webbundle.map.layers )
            //      {
            //          alert(layer.name);
            //     }

            if (map2u_webbundle.search_layer)
            {
                map2u_webbundle.search_layer.mergeNewParams(filterParams);
            }
  {#              $.ajax({
                    type: "GET",
                    data: 'id=' + boundaryid + '&ogc_fid=' + ogc_fid,
                    url: "{{ path('admin_showpolygon') }}",
                    cache: false,
                    success: function(transport) {
                        if (transport.success == true)
                        {
                            var fea = new OpenLayers.Format.WKT().read(transport.data.the_geom);
                            fea.geometry.transform(new OpenLayers.Projection("EPSG:" + projection), new OpenLayers.Projection("EPSG:900913"));
                            fea.attributes['userboundary_id'] = transport.data.userboundary_id;
                            fea.attributes['ogc_fid'] = transport.data.ogc_fid;
                            //  var layers=map.layers;
                            //  for (var i=0;i<layers.length;i++)
                            //  {
                            //      alert(layers[i].name + "   " + layers[i].CLASS_NAME );
                            //  }
                            var layer = map2u_webbundle.map.getLayersByName('Editor');
                            //  alert(layer);
                            if (layer && layer[0])
                                layer[0].addFeatures([fea]);
                            map2u_webbundle.map.zoomToExtent(fea.geometry.getBounds());
                        }

                    }
                });
#}
            //     }
// 
// 
// 
//             onComplete: function(transport){
//            if (200 === transport.status) {
//                result = transport.responseText;
//                alert(result);
//            }
//        }   

// 
// alert(mapeditor);
            //  alert(map.getCenter());
        }

    }
</script>
{% endblock %}